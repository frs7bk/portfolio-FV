#!/usr/bin/env python3
"""
ุฅูุดุงุก ููู ZIP ูุธูู ูุญุชูู ุนูู ูุงูุจ ุงููููุน ุจุฏูู ูุญุชูู ุงููุณุชุฎุฏู
ูููู ุงุณุชุฎุฏุงู ูุฐุง ุงููุงูุจ ูููุดุฑ ุนูู ููุตุงุช ูุซู Vercel
"""
import os
import zipfile
import datetime
import shutil

# ุงุณู ููู ZIP ุงููุงุชุฌ
OUTPUT_ZIP = "clean_portfolio_template.zip"

# ุงููุฌูุฏุงุช ุงูุชู ูุฌุจ ุงูุงุญุชูุงุธ ุจูุง ูุงุฑุบุฉ ููู ุจุฏูู ูููุงุช ุงููุณุชุฎุฏู
EMPTY_DIRS_TO_KEEP = [
    "static/uploads",
    "static/uploads/profile",
    "static/uploads/portfolio",
    "static/uploads/carousel",
    "static/uploads/projects",
    "static/uploads/services",
    "static/uploads/backup_images",
    "instance",
    "tmp"
]

# ุงููููุงุช ูุงููุฌูุฏุงุช ุงูุชู ูุฌุจ ุงุณุชุจุนุงุฏูุง ูู ููู ZIP
EXCLUDE_PATTERNS = [
    ".git/",
    "__pycache__/",
    ".pyc",
    ".env",
    ".DS_Store",
    "venv/",
    "env/",
    "node_modules/",
    "instance/website.db",
    "static/uploads/",  # ุงุณุชุจุนุงุฏ ุฌููุน ุงููููุงุช ุงููุฑููุนุฉ
    "instance/",       # ุงุณุชุจุนุงุฏ ูููุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
    "tmp/",            # ุงุณุชุจุนุงุฏ ุงููููุงุช ุงููุคูุชุฉ
    ".cache/",         # ุงุณุชุจุนุงุฏ ูููุงุช ุงููุงุด
    "uv.lock",
    "attached_assets/", # ุงุณุชุจุนุงุฏ ุงูุตูุฑ ุงููุฑููุฉ ูู ุงููุญุงุฏุซุฉ
    "__pycache__"
]

# ุงููููุงุช ุงูุชู ูุฌุจ ุชุถููููุง ููุท (ูุชุณุฑูุน ุนูููุฉ ุงูุฅูุดุงุก)
INCLUDE_FILES_ONLY = [
    "app.py",
    "main.py",
    "models.py",
    "forms.py",
    "database.py",
    "email_service.py",
    "telegram_service.py",
    "direct_telegram_test.py",
    "telegram_test_routes.py",
    "live_visitors.py",
    "analytics.py",
    "auth_routes.py",
    "portfolio_routes.py",
    "fix_modals_register.py",
    "fix_portfolio_modal_routes.py",
    "fix_modals.py",
    "comments_routes.py",
    "messaging_routes.py",
    "portfolio_instagram.py",
    "download_routes.py",
    "carousel_functions.py",
    "requirements.txt",
    "vercel.json",
    "wsgi.py",
    ".env-sample",
    "SETUP_INSTRUCTIONS.md",
    "DEPLOY.md",
    "README.md",
    ".gitignore"
]

# ุฅุถุงูุงุช ููููุงุช ุฅุถุงููุฉ ูุฅุถุงูุชูุง ุฅูู ุงูุญุฒูุฉ
ADDITIONAL_FILES = [
    # ููู .gitignore ูุน ุงูุฅุนุฏุงุฏุงุช ุงูููุงุณุจุฉ
    ".gitignore",
    # ููู requirements.txt ุงูุฐู ูุญุชูู ุนูู ุงูููุชุจุงุช ุงููุทููุจุฉ
    "requirements.txt",
    # ููู vercel.json ูููุดุฑ ุนูู ููุตุฉ Vercel
    "vercel.json",
    # ููู README.md ุฃู SETUP_INSTRUCTIONS.md ููุชูุซูู
    "README.md",
    "SETUP_INSTRUCTIONS.md"
]

def should_exclude(path):
    """ุชุญุฏูุฏ ูุง ุฅุฐุง ูุงู ุงููุณุงุฑ ูุฌุจ ุงุณุชุจุนุงุฏู"""
    for pattern in EXCLUDE_PATTERNS:
        if pattern in path:
            # ุงุณุชุซูุงุก: ูุง ุชุณุชุจุนุฏ ููู .gitkeep
            if path.endswith(".gitkeep"):
                return False
            return True
    return False

def create_clean_zip():
    """ุฅูุดุงุก ููู ZIP ูุธูู ูุน ุงูุญูุงุธ ุนูู ูููู ุงููุฌูุฏุงุช"""
    timestamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
    temp_dir = f"tmp/export_{timestamp}"
    
    # ุฅูุดุงุก ูุฌูุฏ ูุคูุช ููุชุตุฏูุฑ
    if not os.path.exists("tmp"):
        os.makedirs("tmp")
    
    if os.path.exists(temp_dir):
        shutil.rmtree(temp_dir)
    
    os.makedirs(temp_dir)
    
    # ูุณุฎ ุงููููุงุช ุงููุญุฏุฏุฉ ููุท
    print("ุฌุงุฑู ูุณุฎ ุงููููุงุช ุงูุฃุณุงุณูุฉ...")
    for file in INCLUDE_FILES_ONLY:
        if os.path.exists(file):
            dst_path = os.path.join(temp_dir, file)
            # ุฅูุดุงุก ุงููุฌูุฏ ุงููุฏู ุฅุฐุง ูู ููู ููุฌูุฏุงู
            os.makedirs(os.path.dirname(dst_path), exist_ok=True)
            
            # ูุณุฎ ุงูููู ูุน ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก
            try:
                shutil.copy2(file, dst_path)
                print(f"โ ุชู ูุณุฎ: {file}")
            except (FileNotFoundError, PermissionError, shutil.SameFileError) as e:
                print(f"โ ุชุฎุทู ุงูููู: {file} - ุงูุณุจุจ: {str(e)}")
                continue
    
    # ูุณุฎ ุงููุฌูุฏุงุช ุงููููุฉ
    important_folders = [
        "templates",
        "static/css",
        "static/js"
    ]
    
    print("\nุฌุงุฑู ูุณุฎ ุงููุฌูุฏุงุช ุงููููุฉ...")
    for folder in important_folders:
        if os.path.exists(folder):
            dst_folder = os.path.join(temp_dir, folder)
            
            # ุฅูุดุงุก ุงููุฌูุฏ ุงููุฏู
            os.makedirs(dst_folder, exist_ok=True)
            
            # ูุณุฎ ูุญุชููุงุช ุงููุฌูุฏ
            for root, dirs, files in os.walk(folder):
                # ุชุฎุทู ุงููุฌูุฏุงุช ุงููุณุชุจุนุฏุฉ
                dirs[:] = [d for d in dirs if not should_exclude(os.path.join(root, d) + "/")]
                
                for file in files:
                    src_path = os.path.join(root, file)
                    
                    # ุชุฎุทู ุงููููุงุช ุงููุณุชุจุนุฏุฉ
                    if should_exclude(src_path):
                        continue
                    
                    # ุฅูุดุงุก ูุณุงุฑ ุงููุณุฎ
                    rel_path = os.path.relpath(src_path, ".")
                    dst_path = os.path.join(temp_dir, rel_path)
                    
                    # ุฅูุดุงุก ุงููุฌูุฏ ุงููุฏู ุฅุฐุง ูู ููู ููุฌูุฏุงู
                    os.makedirs(os.path.dirname(dst_path), exist_ok=True)
                    
                    # ูุณุฎ ุงูููู ูุน ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก
                    try:
                        shutil.copy2(src_path, dst_path)
                    except (FileNotFoundError, PermissionError, shutil.SameFileError) as e:
                        print(f"โ ุชุฎุทู ุงูููู: {src_path} - ุงูุณุจุจ: {str(e)}")
                        continue
            
            print(f"โ ุชู ูุณุฎ: {folder}")
        else:
            print(f"โ ุงููุฌูุฏ ุบูุฑ ููุฌูุฏ: {folder}")
    
    # ุฅูุดุงุก ุงููุฌูุฏุงุช ุงููุงุฑุบุฉ ุงูุชู ูุฌุจ ุงูุงุญุชูุงุธ ุจูุง
    for empty_dir in EMPTY_DIRS_TO_KEEP:
        full_path = os.path.join(temp_dir, empty_dir)
        os.makedirs(full_path, exist_ok=True)
        # ุฅุถุงูุฉ ููู .gitkeep ููุชุฃูุฏ ูู ุฅุฏุฑุงุฌ ุงููุฌูุฏ ูู Git
        with open(os.path.join(full_path, ".gitkeep"), "w") as f:
            f.write("# This empty file ensures that the directory is included in Git\n")
    
    # ุฅูุดุงุก ููู ZIP
    with zipfile.ZipFile(OUTPUT_ZIP, "w", zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(temp_dir):
            for file in files:
                src_path = os.path.join(root, file)
                # ุฅุถุงูุฉ ุงูููู ุฅูู ZIP ุจุฏูู ุงููุณุงุฑ ุงููุคูุช
                arc_path = os.path.relpath(src_path, temp_dir)
                zipf.write(src_path, arc_path)
    
    # ุญุฐู ุงููุฌูุฏ ุงููุคูุช
    shutil.rmtree(temp_dir)
    
    # ุทุจุงุนุฉ ุชูุฑูุฑ ุนู ุงูููู ุงูุฐู ุชู ุฅูุดุงุคู
    zip_size = os.path.getsize(OUTPUT_ZIP) / 1024  # ุจุงูููููุจุงูุช
    
    print(f"\nโ ุชู ุฅูุดุงุก ููู ZIP ุจูุฌุงุญ: {OUTPUT_ZIP}")
    print(f"๐ฆ ุญุฌู ุงูููู: {zip_size:.1f} ููููุจุงูุช")
    print("๐ ูุญุชูู ุงูููู ุนูู ูุงูุจ ูุธูู ูููููุน ุจุฏูู ูููุงุช ุงููุณุชุฎุฏู")
    print("๐ ุชู ุงูุญูุงุธ ุนูู ูููู ุงููุฌูุฏุงุช ุงููููุฉ ูุน ูููุงุช .gitkeep")
    print("๐ ูููู ุงุณุชุฎุฏุงู ูุฐุง ุงูููู ูููุดุฑ ุนูู ููุตุงุช ุงุณุชุถุงูุฉ ูุซู Vercel")

if __name__ == "__main__":
    create_clean_zip()
